// <auto-generated />
using System;
using Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251031022944_RemoveIdFromActivityReportPlayer")]
    partial class RemoveIdFromActivityReportPlayer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.DB.Activity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OpTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OpTypeId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Domain.DB.ActivityReport", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("NeedsFullCheck")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("Id");

                    b.ToTable("ActivityReports");
                });

            modelBuilder.Entity("Domain.DB.ActivityReportPlayer", b =>
                {
                    b.Property<long>("ActivityReportId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("ActivityReportId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("ActivityReportPlayers");
                });

            modelBuilder.Entity("Domain.DB.OpType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OpTypes");
                });

            modelBuilder.Entity("Domain.DB.Player", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayNameCode")
                        .HasColumnType("integer");

                    b.Property<string>("LastPlayedCharacterBackgroundPath")
                        .HasColumnType("text");

                    b.Property<string>("LastPlayedCharacterEmblemPath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdateCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdateStarted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdateStatus")
                        .HasColumnType("text");

                    b.Property<int>("MembershipType")
                        .HasColumnType("integer");

                    b.Property<bool>("NeedsFullCheck")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Domain.DB.Activity", b =>
                {
                    b.HasOne("Domain.DB.OpType", "OpType")
                        .WithMany("Activities")
                        .HasForeignKey("OpTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpType");
                });

            modelBuilder.Entity("Domain.DB.ActivityReport", b =>
                {
                    b.HasOne("Domain.DB.Activity", "Activity")
                        .WithMany("ActivityReports")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Domain.DB.ActivityReportPlayer", b =>
                {
                    b.HasOne("Domain.DB.ActivityReport", "ActivityReport")
                        .WithMany("Players")
                        .HasForeignKey("ActivityReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DB.Player", "Player")
                        .WithMany("ActivityReportPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityReport");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Domain.DB.Activity", b =>
                {
                    b.Navigation("ActivityReports");
                });

            modelBuilder.Entity("Domain.DB.ActivityReport", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Domain.DB.OpType", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Domain.DB.Player", b =>
                {
                    b.Navigation("ActivityReportPlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
