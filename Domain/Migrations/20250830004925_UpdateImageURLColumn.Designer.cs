// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Domain.Data;

#nullable disable

namespace API.Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250830004925_UpdateImageURLColumn")]
    partial class UpdateImageURLColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Classes.DB.Activity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Classes.DB.ActivityHashMapping", b =>
                {
                    b.Property<long>("SourceHash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SourceHash"));

                    b.Property<long>("CanonicalActivityId")
                        .HasColumnType("bigint");

                    b.HasKey("SourceHash");

                    b.HasIndex("CanonicalActivityId");

                    b.ToTable("ActivityHashMappings");
                });

            modelBuilder.Entity("Classes.DB.ActivityReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<long>("InstanceId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ActivityId", "PlayerId")
                        .HasDatabaseName("IX_ActivityReport_Activity_Player");

                    b.HasIndex("ActivityId", "PlayerId", "Completed")
                        .HasDatabaseName("IX_ActivityReport_Activity_Player_Completed_InclDuration");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("ActivityId", "PlayerId", "Completed"), new[] { "Duration" });

                    b.HasIndex("ActivityId", "PlayerId", "Duration")
                        .HasDatabaseName("IX_ActivityReport_Completed_Fastest")
                        .HasFilter("\"Completed\" = TRUE");

                    b.ToTable("ActivityReports");
                });

            modelBuilder.Entity("Classes.DB.ActivityType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OpTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OpTypeId");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("Classes.DB.OpType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OpTypes");
                });

            modelBuilder.Entity("Classes.DB.Player", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayNameCode")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastPlayed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastPlayedActivityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastProfileView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdateCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdateStarted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdateStatus")
                        .HasColumnType("text");

                    b.Property<int>("MembershipType")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatePriority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LastPlayedActivityId")
                        .IsUnique();

                    b.HasIndex("Id", "UpdatePriority")
                        .HasDatabaseName("IX_Player_Id_UpdatePriority");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Classes.DB.Activity", b =>
                {
                    b.HasOne("Classes.DB.ActivityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");
                });

            modelBuilder.Entity("Classes.DB.ActivityHashMapping", b =>
                {
                    b.HasOne("Classes.DB.Activity", "CanonicalActivity")
                        .WithMany()
                        .HasForeignKey("CanonicalActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CanonicalActivity");
                });

            modelBuilder.Entity("Classes.DB.ActivityReport", b =>
                {
                    b.HasOne("Classes.DB.Activity", "Activity")
                        .WithMany("ActivityReports")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Classes.DB.Player", "Player")
                        .WithMany("ActivityReports")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Classes.DB.ActivityType", b =>
                {
                    b.HasOne("Classes.DB.OpType", "OpType")
                        .WithMany("ActivityTypes")
                        .HasForeignKey("OpTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpType");
                });

            modelBuilder.Entity("Classes.DB.Player", b =>
                {
                    b.HasOne("Classes.DB.ActivityReport", "LastActivityReport")
                        .WithOne()
                        .HasForeignKey("Classes.DB.Player", "LastPlayedActivityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LastActivityReport");
                });

            modelBuilder.Entity("Classes.DB.Activity", b =>
                {
                    b.Navigation("ActivityReports");
                });

            modelBuilder.Entity("Classes.DB.ActivityType", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Classes.DB.OpType", b =>
                {
                    b.Navigation("ActivityTypes");
                });

            modelBuilder.Entity("Classes.DB.Player", b =>
                {
                    b.Navigation("ActivityReports");
                });
#pragma warning restore 612, 618
        }
    }
}
